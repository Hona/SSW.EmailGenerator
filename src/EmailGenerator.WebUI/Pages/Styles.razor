@page "/styles"

@using EmailGenerator.WebApiClient
@using System.Text.Json

@inject StylesClient _stylesClient
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IDialogService _dialogService
@inject BreadcrumbService _breadcrumbService

<PageTitle>Styles</PageTitle>

<div class="d-flex justify-space-between" style="width: 100%">
    <MudText Typo="Typo.h3">Styles</MudText>
    <MudFab StartIcon="@Icons.Filled.Add" Color="Color.Primary" Href="/styles/create"/>
</div>

@if (_loading)
{
    <MudProgressLinear Indeterminate Color="MudBlazor.Color.Primary" />
}
else
{
    <MudGrid Spacing="4" Justify="Justify.Center">
        @foreach (var style in _styles)
        {
            Console.WriteLine(JsonSerializer.Serialize(style));
            <MudItem Style="width: 300px">
                <MudCard>
                    <MudCardHeader>
                        @style.DisplayName
                    </MudCardHeader>
                    <MudCardContent Style="@("font-family: " + style.Font + ";")">
                        <div style="@($"font-size: {style.HeadingSize}px; color: {style.HeadingColor}; font-weight: bold; border: none; padding-bottom: 6px")">
                            Lorem ut lobortis dignissim tempor
                        </div>
                        <div style="@($"font-size: {style.TextSize}px; color: {style.TextColor}"); border: none;">
                            Tempor dolor elitr vel aliquyam minim et et erat. Sadipscing duo erat sit justo wisi facilisis vero consetetur ea voluptua duo et. Sed consequat sit. Elitr at invidunt rebum dolor nonumy dolor dolor blandit ea diam aliquyam kasd et eos dolor duo elitr. No labore voluptua voluptua elit eros rebum ea invidunt justo sed iusto et sed dolor nulla aliquam.
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButtonGroup>
                            <MudIconButton Href="@("/styles/" + style.Id + "/edit")" Icon="@Icons.Filled.Edit" />
                            <MudIconButton OnClick="async () => await DeleteAsync(style)" Color="Color.Warning" Icon="@Icons.Filled.Delete"/>
                        </MudButtonGroup>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code
{
    private bool _loading;

    private ICollection<Style>? _styles;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        _styles = await _stylesClient.GetAsync();

        _loading = false;
    }

    protected override void OnAfterRender(bool firstRender) => _breadcrumbService.Clear();

    private async Task DeleteAsync(Style style)
    {
        var confirm = await _dialogService.ShowMessageBox("Warning", "Are you sure you want to delete this style?", yesText: "Delete", noText: "Cancel");

        if (confirm is not true)
        {
            return;
        }

        _loading = true;

        await _stylesClient.DeleteAsync(style.Id);

        await OnInitializedAsync();

        _loading = false;
    }

    private void OpenEmailTemplate()
    {
        var uri = "https://outlook.office.com/?path=/mail/action/compose&to=AdamCogan@ssw.com.au&subject=Daily Scrum&body=Hi Adam,";
        _jsRuntime.InvokeVoidAsync("open", uri, "_blank");
    }

}